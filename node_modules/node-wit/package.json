{
  "_args": [
    [
      {
        "raw": "node-wit@^3.2.2",
        "scope": null,
        "escapedName": "node-wit",
        "name": "node-wit",
        "rawSpec": "^3.2.2",
        "spec": ">=3.2.2 <4.0.0",
        "type": "range"
      },
      "/root/Desktop/Wit-Facebook"
    ]
  ],
  "_from": "node-wit@>=3.2.2 <4.0.0",
  "_id": "node-wit@3.3.2",
  "_inCache": true,
  "_location": "/node-wit",
  "_nodeVersion": "5.9.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/node-wit-3.3.2.tgz_1463596762818_0.4360089513938874"
  },
  "_npmUser": {
    "name": "patapizza",
    "email": "julien@wit.ai"
  },
  "_npmVersion": "3.7.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-wit@^3.2.2",
    "scope": null,
    "escapedName": "node-wit",
    "name": "node-wit",
    "rawSpec": "^3.2.2",
    "spec": ">=3.2.2 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-wit/-/node-wit-3.3.2.tgz",
  "_shasum": "9902608f2c2a3419cdbbb0389b4fc03a616616a5",
  "_shrinkwrap": null,
  "_spec": "node-wit@^3.2.2",
  "_where": "/root/Desktop/Wit-Facebook",
  "author": {
    "name": "Julien Odent",
    "email": "julien@wit.ai"
  },
  "bugs": {
    "url": "https://github.com/wit-ai/node-wit/issues"
  },
  "dependencies": {
    "node-fetch": "^1.5.1",
    "node-uuid": "^1.4.7"
  },
  "description": "Wit.ai Node.js SDK",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "9902608f2c2a3419cdbbb0389b4fc03a616616a5",
    "tarball": "https://registry.npmjs.org/node-wit/-/node-wit-3.3.2.tgz"
  },
  "gitHead": "e3802cde815026ec205c2922b7af11fcc7ad1a7c",
  "homepage": "https://github.com/wit-ai/node-wit#readme",
  "keywords": [
    "wit",
    "wit.ai",
    "bot",
    "botengine",
    "bots",
    "nlp",
    "automation"
  ],
  "main": "index.js",
  "maintainers": [
    {
      "name": "blandinw",
      "email": "willy@wit.ai"
    },
    {
      "name": "catacola",
      "email": "akesich@gmail.com"
    },
    {
      "name": "oliviervaussy",
      "email": "oliv@wit.ai"
    },
    {
      "name": "patapizza",
      "email": "julien@wit.ai"
    }
  ],
  "name": "node-wit",
  "optionalDependencies": {},
  "readme": "# Wit Node.js SDK [![npm](https://img.shields.io/npm/v/node-wit.svg)](https://www.npmjs.com/package/node-wit)\n\n`node-wit` is the Node.js SDK for [Wit.ai](https://wit.ai).\n\n## Install\n\nIn your Node.js project, run:\n\n```bash\nnpm install --save node-wit\n```\n\n## Quickstart\n\nRun in your terminal:\n\n```bash\nnode examples/template.js <your_token>\n```\n\nSee `examples` folder for more examples.\n\n## API\n\n### Version change\n\nOn 2016, May 11th, the /message API was updated to reflect the new Bot Engine model: intent are now entities. \nWe updated the SDK to the latest version: 20160516.\nYou can target a specific version by setting the env variable `WIT_API_VERSION`.\n\n```json\n{\n  \"msg_id\" : \"e86468e5-b9e8-4645-95ce-b41a66fda88d\",\n  \"_text\" : \"hello\",\n  \"entities\" : {\n    \"intent\" : [ {\n      \"confidence\" : 0.9753469589149633,\n      \"value\" : \"greetings\"\n    } ]\n  }\n}\n```\n\nVersion prior to 20160511 will return the old format:\n\n```json\n{\n  \"msg_id\" : \"722fc79b-725c-4ca1-8029-b7f57ff88f54\",\n  \"_text\" : \"hello\",\n  \"outcomes\" : [ {\n    \"_text\" : \"hello\",\n    \"confidence\" : null,\n    \"intent\" : \"default_intent\",\n    \"entities\" : {\n      \"intent\" : [ {\n        \"confidence\" : 0.9753469589149633,\n        \"value\" : \"greetings\"\n      } ]\n    }\n  } ],\n  \"WARNING\" : \"DEPRECATED\"\n}\n```\n\n### Overview\n\nThe Wit module provides a Wit class with the following methods:\n* `message` - the Wit [message](https://wit.ai/docs/http/20160330#get-intent-via-text-link) API\n* `converse` - the low-level Wit [converse](https://wit.ai/docs/http/20160330#converse-link) API\n* `runActions` - a higher-level method to the Wit converse API\n* `interactive` - starts an interactive conversation with your bot\n\n### Wit class\n\nThe Wit constructor takes the following parameters:\n* `token` - the access token of your Wit instance\n* `actions` - the object with your actions\n* `logger` - (optional) the object handling the logging.\n\nThe `actions` object has action names as properties, and action implementations as values.\nYou need to provide at least an implementation for the special actions `say`, `merge` and `error`.\n\nA minimal `actions` object looks like this:\n```js\nconst actions = {\n  say(sessionId, context, message, cb) {\n    console.log(message);\n    cb();\n  },\n  merge(sessionId, context, entities, message, cb) {\n    cb(context);\n  },\n  error(sessionId, context, error) {\n    console.log(error.message);\n  },\n};\n```\n\nA custom action takes the following parameters:\n* `sessionId` - a unique identifier describing the user session\n* `context` - the object representing the session state\n* `cb(context)` - a callback function to fire at the end of your action with the updated context.\n\nExample:\n```js\nconst Wit = require('node-wit').Wit;\nconst client = new Wit(token, actions);\n```\n\nThe `logger` object should implement the methods `debug`, `log`, `warn` and `error`.\nAll methods take a single parameter `message`.\n\nFor convenience, we provide a `Logger`, taking a log level parameter (provided as `logLevels`).\nThe following levels are defined: `DEBUG`, `LOG`, `WARN`, `ERROR`.\n\nExample:\n```js\nconst Logger = require('node-wit').Logger;\nconst levels = require('node-wit').logLevels;\nconst Wit = require('node-wit').Wit;\n\nconst logger = new Logger(levels.DEBUG);\nconst client = new Wit(token, actions, logger);\n```\n\n### message\n\nThe Wit [message](https://wit.ai/docs/http/20160330#get-intent-via-text-link) API.\n\nTakes the following parameters:\n* `message` - the text you want Wit.ai to extract the information from\n* `context` - (optional) the object representing the session state\n* `cb(error, data)` - a callback function with the JSON response\n\nExample:\n```js\nconst context = {};\nclient.message('what is the weather in London?', context, (error, data) => {\n  if (error) {\n    console.log('Oops! Got an error: ' + error);\n  } else {\n    console.log('Yay, got Wit.ai response: ' + JSON.stringify(data));\n  }\n});\n```\n\n### runActions\n\nA higher-level method to the Wit converse API.\n\nTakes the following parameters:\n* `sessionId` - a unique identifier describing the user session\n* `message` - the text received from the user\n* `context` - the object representing the session state\n* `cb(error, context)` - a callback function with the updated context\n* `maxSteps` - (optional) the maximum number of actions to execute (defaults to 5)\n\nExample:\n```js\nconst session = 'my-user-session-42';\nconst context0 = {};\nclient.runActions(session, 'what is the weather in London?', context0, (e, context1) => {\n  if (e) {\n    console.log('Oops! Got an error: ' + e);\n    return;\n  }\n  console.log('The session state is now: ' + JSON.stringify(context1));\n  client.runActions(session, 'and in Brussels?', context1, (e, context2) => {\n    if (e) {\n      console.log('Oops! Got an error: ' + e);\n      return;\n    }\n    console.log('The session state is now: ' + JSON.stringify(context2));\n  });\n});\n```\n\n### converse\n\nThe low-level Wit [converse](https://wit.ai/docs/http/20160330#converse-link) API.\n\nTakes the following parameters:\n* `sessionId` - a unique identifier describing the user session\n* `message` - the text received from the user\n* `context` - the object representing the session state\n* `cb(error, data)` - a callback function with the JSON response\n\nExample:\n```js\nclient.converse('my-user-session-42', 'what is the weather in London?', {}, (error, data) => {\n  if (error) {\n    console.log('Oops! Got an error: ' + error);\n  } else {\n    console.log('Yay, got Wit.ai response: ' + JSON.stringify(data));\n  }\n});\n```\n\n### interactive\n\nStarts an interactive conversation with your bot.\n\nExample:\n```js\nclient.interactive();\n```\n\nSee the [docs](https://wit.ai/docs) for more information.\n\n\n## Messenger integration example\n\nThis quickstart assumes that you have:\n* a [Wit.ai bot setup](https://wit.ai/docs/quickstart);\n* a [Messenger Platform setup](https://developers.facebook.com/docs/messenger-platform/quickstart).\n\n### Install dependencies\n\n```bash\nnpm install body-parser express node-fetch\n```\n\n### Download and install ngrok\n\nFrom [here](https://ngrok.com/download).\n\n### Run ngrok\n\n```bash\n./ngrok http 8445\n```\n\nThis will provide `your_ngrok_domain` (the `Forwarding` line).\n\n### Run the example\n\n```bash\nexport WIT_TOKEN=your_access_token\nexport FB_PAGE_ID=your_page_id\nexport FB_PAGE_TOKEN=your_page_token\nexport FB_VERIFY_TOKEN=any_token\nnode examples/messenger.js\n```\n\n### Subscribe your page to Messenger Webhooks\n\nUsing your `FB_VERIFY_TOKEN` and `https://<your_ngrok_domain>/fb` as callback URL.\n\nSee the [Messenger Platform docs](https://developers.facebook.com/docs/messenger-platform/quickstart).\n\n### Talk to your bot on Messenger!\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/wit-ai/node-wit.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "3.3.2"
}
